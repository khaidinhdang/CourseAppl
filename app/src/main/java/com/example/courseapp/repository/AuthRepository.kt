package com.example.courseapp.repositoryimport android.content.Contextimport android.net.Uriimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport com.example.courseapp.model.Userimport com.example.courseapp.utils.SharePrefimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.auth.FirebaseUserimport com.google.firebase.auth.UserProfileChangeRequestimport com.google.firebase.database.*import com.google.firebase.storage.FirebaseStorageclass AuthRepository {    private val auth = FirebaseAuth.getInstance()    private val db = FirebaseDatabase.getInstance()    private val userRef = db.getReference("user")    private val storage: FirebaseStorage = FirebaseStorage.getInstance()    private val _firebaseUser = MutableLiveData<FirebaseUser?>()    val firebaseUser: LiveData<FirebaseUser?> = _firebaseUser    private val _error = MutableLiveData<String>()    val error: LiveData<String> = _error    private val _updateSuccess = MutableLiveData<Boolean>()    val updateSuccess: LiveData<Boolean> = _updateSuccess    private val _userRole = MutableLiveData<String>()    val userRole: LiveData<String> = _userRole    init {        _firebaseUser.value = auth.currentUser    }    fun login(email: String, password: String, context: Context) {        auth.signInWithEmailAndPassword(email, password)            .addOnCompleteListener { task ->                if (task.isSuccessful) {                    _firebaseUser.postValue(auth.currentUser)                    getData(auth.currentUser?.uid, context)                } else {                    _error.postValue("Đăng nhập thất bại: ${task.exception?.message}")                }            }    }    private fun getData(uid: String?, context: Context) {        uid?.let {            userRef.child(uid).addListenerForSingleValueEvent(object : ValueEventListener {                override fun onDataChange(snapshot: DataSnapshot) {                    val userData = snapshot.getValue(User::class.java)                    userData?.let {                        SharePref.storeData(                            it.name,                            it.email,                            it.bio,                            it.userName,                            it.imageUrl,                            context                        )                    }                }                override fun onCancelled(error: DatabaseError) {                    _error.postValue("Lấy dữ liệu người dùng thất bại: ${error.message}")                }            })        }    }    fun register(        email: String,        password: String,        name: String,        bio: String,        userName: String,        imageUri: Uri,        role: String,        context: Context    ) {        auth.createUserWithEmailAndPassword(email, password)            .addOnCompleteListener { task ->                if (task.isSuccessful) {                    _firebaseUser.postValue(auth.currentUser)                    saveData(email, password, name, bio, userName, imageUri.toString(), auth.currentUser?.uid, role, context)                } else {                    _error.postValue("Đăng ký thất bại: ${task.exception?.message}")                }            }    }    private fun saveData(        email: String,        password: String,        name: String,        bio: String,        userName: String,        imageUrl: String,        uid: String?,        role: String,        context: Context    ) {        val userData = User(email, password, name, bio, userName, imageUrl, uid ?: "", role)        userRef.child(uid ?: "").setValue(userData)            .addOnSuccessListener {                SharePref.storeData(name, email, bio, userName, imageUrl, context)            }.addOnFailureListener { error ->                _error.postValue("Lưu dữ liệu người dùng thất bại: ${error.message}")            }    }    fun promoteToAdmin(uid: String) {        userRef.child(uid).child("role").setValue("admin")            .addOnSuccessListener {                // Notify success if needed            }.addOnFailureListener { error ->                _error.postValue("Cập nhật vai trò người dùng thất bại: ${error.message}")            }    }    fun forgot(email: String) {        auth.sendPasswordResetEmail(email)            .addOnCompleteListener { task ->                if (task.isSuccessful) {                    _firebaseUser.postValue(auth.currentUser)                } else {                    _error.postValue("Quên mật khẩu thất bại: ${task.exception?.message}")                }            }    }    fun logout() {        auth.signOut()        _firebaseUser.postValue(null)    }    fun updateUser(        name: String,        email: String,        bio: String,        userName: String,        imageUri: Uri?,        context: Context    ) {        val user = auth.currentUser        val profileUpdates = UserProfileChangeRequest.Builder()            .setDisplayName(userName)            .setPhotoUri(imageUri)            .build()        user?.updateProfile(profileUpdates)            ?.addOnCompleteListener { task ->                if (task.isSuccessful) {                    _updateSuccess.value = true                    if (imageUri != null) {                        val storageRef = storage.reference.child("images/${user.uid}")                        val uploadTask = storageRef.putFile(imageUri)                        uploadTask.addOnSuccessListener { uploadTask ->                            storageRef.downloadUrl.addOnSuccessListener { uri ->                                val imageUrl = uri.toString()                                userRef.child(user.uid).updateChildren(                                    mapOf<String, Any>(                                        "name" to name,                                        "email" to email,                                        "bio" to bio,                                        "userName" to userName,                                        "imageUrl" to imageUrl                                    )                                ).addOnSuccessListener {                                    SharePref.storeData(name, email, bio, userName, imageUrl, context)                                }.addOnFailureListener { error ->                                    _error.postValue("Cập nhật thông tin người dùng thất bại: ${error.message}")                                }                            }.addOnFailureListener { exception ->                                _error.postValue("Lỗi khi tải ảnh lên: ${exception.message}")                            }                        }.addOnFailureListener { exception ->                            _error.postValue("Lỗi khi tải ảnh lên: ${exception.message}")                        }                    } else {                        userRef.child(user.uid).updateChildren(                            mapOf<String, Any>(                                "name" to name,                                "email" to email,                                "bio" to bio,                                "userName" to userName                            )                        ).addOnSuccessListener {                            SharePref.storeData(name, email, bio, userName, "", context)                        }.addOnFailureListener { error ->                            _error.postValue("Cập nhật thông tin người dùng thất bại: ${error.message}")                        }                    }                } else {                    _error.postValue("Cập nhật thông tin người dùng thất bại: ${task.exception?.message}")                }            }    }    fun checkAdminPrivileges(context: Context): Boolean {        val uid = auth.currentUser?.uid ?: return false        var isAdmin = false        userRef.child(uid).child("role").addListenerForSingleValueEvent(object : ValueEventListener {            override fun onDataChange(snapshot: DataSnapshot) {                val role = snapshot.getValue(String::class.java)                if (role == "teacher") {                    isAdmin = true                } else {                    _error.postValue("Bạn không có quyền truy cập.")                }            }            override fun onCancelled(error: DatabaseError) {                _error.postValue("Lỗi khi kiểm tra quyền truy cập: ${error.message}")            }        })        return isAdmin    }    fun fetchUserRole() {        val uid = auth.currentUser?.uid ?: return        userRef.child(uid).child("role").addListenerForSingleValueEvent(object : ValueEventListener {            override fun onDataChange(snapshot: DataSnapshot) {                _userRole.value = snapshot.getValue(String::class.java)            }            override fun onCancelled(error: DatabaseError) {                _error.postValue("Lỗi khi lấy vai trò người dùng: ${error.message}")            }        })    }}