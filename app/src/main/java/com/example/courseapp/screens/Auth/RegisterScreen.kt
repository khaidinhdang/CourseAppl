package com.example.courseapp.screens.Authimport android.Manifestimport android.content.pm.PackageManagerimport android.net.Uriimport android.os.Buildimport android.widget.Toastimport androidx.activity.compose.rememberLauncherForActivityResultimport androidx.activity.result.contract.ActivityResultContractsimport androidx.compose.foundation.Imageimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.shape.CircleShapeimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.foundation.text.ClickableTextimport androidx.compose.material.TextFieldimport androidx.compose.material.TextFieldDefaultsimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.outlined.Emailimport androidx.compose.material.icons.outlined.Lockimport androidx.compose.material.icons.outlined.Personimport androidx.compose.material3.Buttonimport androidx.compose.material3.ButtonDefaultsimport androidx.compose.material3.Checkboximport androidx.compose.material3.Iconimport androidx.compose.material3.RadioButtonimport androidx.compose.material3.Textimport androidx.compose.material3.TextButtonimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.getValueimport androidx.compose.runtime.livedata.observeAsStateimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.saveable.rememberSaveableimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.text.SpanStyleimport androidx.compose.ui.text.buildAnnotatedStringimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.input.PasswordVisualTransformationimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.text.withStyleimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.core.content.ContextCompatimport androidx.lifecycle.viewmodel.compose.viewModelimport androidx.navigation.NavHostControllerimport coil.compose.rememberAsyncImagePainterimport com.example.courseapp.Rimport com.example.courseapp.navigation.Routesimport com.example.courseapp.ui.theme.black80import com.example.courseapp.ViewModel.AuthViewModel@Composablefun RegisterScreen(navHostController: NavHostController) {    val context = LocalContext.current    var name by remember { mutableStateOf("") }    var email by remember { mutableStateOf("") }    var bio by remember { mutableStateOf("") }    var userName by remember { mutableStateOf("") }    var password by remember { mutableStateOf("") }    var imageUri by remember { mutableStateOf<Uri?>(null) }    var selectedRole by remember { mutableStateOf("user") }    val authViewModel: AuthViewModel = viewModel()    val firebaseUser by authViewModel.firebaseUser.observeAsState(null)    val error by authViewModel.error.observeAsState()    val (agree, onAgreeChange) = rememberSaveable { mutableStateOf(false) }    val permissionToRequest = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {        Manifest.permission.READ_MEDIA_IMAGES    } else Manifest.permission.READ_EXTERNAL_STORAGE    val launcher = rememberLauncherForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? ->        imageUri = uri    }    val permissionLauncher = rememberLauncherForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted: Boolean ->        if (!isGranted) {            Toast.makeText(context, "Permission Denied", Toast.LENGTH_SHORT).show()        }    }    LaunchedEffect(firebaseUser) {        if (firebaseUser != null) {            navHostController.navigate(Routes.BottomNav.routes) {                popUpTo(navHostController.graph.startDestinationId)                launchSingleTop = true            }        }    }    LaunchedEffect(error) {        error?.let {            Toast.makeText(context, it, Toast.LENGTH_SHORT).show()        }    }    Column(        horizontalAlignment = Alignment.Start,        verticalArrangement = Arrangement.Top,        modifier = Modifier            .fillMaxSize()            .background(Color.White)            .padding(25.dp)    ) {        Column(            horizontalAlignment = Alignment.Start,            modifier = Modifier.fillMaxWidth()        ) {            Text(                text = "Create Account",                fontSize = 30.sp,                fontWeight = FontWeight.Bold            )            Spacer(modifier = Modifier.height(10.dp))            Text(                text = "Start learning with create your account",                fontWeight = FontWeight.SemiBold,                fontSize = 14.sp,                color = Color(0xFFB2B9CA)            )        }        Spacer(modifier = Modifier.height(15.dp))        Column(            horizontalAlignment = Alignment.CenterHorizontally,            verticalArrangement = Arrangement.Center,            modifier = Modifier.fillMaxWidth()        ) {            Image(                painter = if (imageUri == null)                    painterResource(id = R.drawable.baseline_person_24)                else rememberAsyncImagePainter(model = imageUri),                contentDescription = null,                modifier = Modifier                    .size(70.dp)                    .clip(CircleShape)                    .background(Color.LightGray)                    .clickable {                        val isGranted = ContextCompat.checkSelfPermission(                            context, permissionToRequest                        ) == PackageManager.PERMISSION_GRANTED                        if (isGranted) {                            launcher.launch("image/*")                        } else {                            permissionLauncher.launch(permissionToRequest)                        }                    },                contentScale = ContentScale.Crop            )        }        Spacer(modifier = Modifier.height(15.dp))//        Column(//            horizontalAlignment = Alignment.Start,//            verticalArrangement = Arrangement.Top//        ) {//            Text(//                text = "Name",//                fontWeight = FontWeight.Bold,//                fontSize = 15.sp,//                textAlign = TextAlign.Left//            )//            Spacer(modifier = Modifier.height(10.dp))//            TextField(//                value = name,//                onValueChange = { name = it },//                label = {//                    Text(//                        text = "Enter your name",//                        fontWeight = FontWeight.SemiBold,//                        fontSize = 14.sp,//                        color = Color(0xFFB2B9CA)//                    )//                },//                leadingIcon = {//                    Icon(imageVector = Icons.Outlined.Person, contentDescription = null)//                },//                colors = TextFieldDefaults.textFieldColors(//                    unfocusedIndicatorColor = Color.Transparent,//                    backgroundColor = Color(0xFFFBFBFD),//                    cursorColor = Color(0xFFB2B9CA),//                ),//                modifier = Modifier.size(366.dp, 56.dp),//            )//        }////        Spacer(modifier = Modifier.height(10.dp))        Column(            horizontalAlignment = Alignment.Start,            verticalArrangement = Arrangement.Top        ) {            Text(                text = "Username",                fontWeight = FontWeight.Bold,                fontSize = 15.sp,                textAlign = TextAlign.Left            )            Spacer(modifier = Modifier.height(10.dp))            TextField(                value = userName,                onValueChange = { userName = it },                label = {                    Text(                        text = "Create your username",                        fontWeight = FontWeight.SemiBold,                        fontSize = 14.sp,                        color = Color(0xFFB2B9CA)                    )                },                leadingIcon = {                    Icon(imageVector = Icons.Outlined.Person, contentDescription = null)                },                colors = TextFieldDefaults.textFieldColors(                    unfocusedIndicatorColor = Color.Transparent,                    backgroundColor = Color(0xFFFBFBFD),                    cursorColor = Color(0xFFB2B9CA),                ),                modifier = Modifier.size(366.dp, 56.dp),            )        }//        Spacer(modifier = Modifier.height(10.dp))////        Column(//            horizontalAlignment = Alignment.Start,//            verticalArrangement = Arrangement.Top//        ) {//            Text(//                text = "Bio",//                fontWeight = FontWeight.Bold,//                fontSize = 15.sp,//                textAlign = TextAlign.Left//            )//            Spacer(modifier = Modifier.height(10.dp))//            TextField(//                value = bio,//                onValueChange = { bio = it },//                label = {//                    Text(//                        text = "Enter your bio",//                        fontWeight = FontWeight.SemiBold,//                        fontSize = 14.sp,//                        color = Color(0xFFB2B9CA)//                    )//                },//                leadingIcon = {//                    Icon(imageVector = Icons.Outlined.Person, contentDescription = null)//                },//                colors = TextFieldDefaults.textFieldColors(//                    unfocusedIndicatorColor = Color.Transparent,//                    backgroundColor = Color(0xFFFBFBFD),//                    cursorColor = Color(0xFFB2B9CA),//                ),//                modifier = Modifier.size(366.dp, 56.dp),//            )//        }        Spacer(modifier = Modifier.height(10.dp))        Column(            horizontalAlignment = Alignment.Start,            verticalArrangement = Arrangement.Top        ) {            Text(                text = "Email",                fontWeight = FontWeight.Bold,                fontSize = 15.sp,                textAlign = TextAlign.Left            )            Spacer(modifier = Modifier.height(10.dp))            TextField(                value = email,                onValueChange = { email = it },                label = {                    Text(                        text = "Enter your Email",                        fontWeight = FontWeight.SemiBold,                        fontSize = 14.sp,                        color = Color(0xFFB2B9CA)                    )                },                leadingIcon = {                    Icon(imageVector = Icons.Outlined.Email, contentDescription = null)                },                colors = TextFieldDefaults.textFieldColors(                    unfocusedIndicatorColor = Color.Transparent,                    backgroundColor = Color(0xFFFBFBFD),                    cursorColor = Color(0xFFB2B9CA),                ),                modifier = Modifier.size(366.dp, 56.dp),            )        }        Spacer(modifier = Modifier.height(10.dp))        Column(            horizontalAlignment = Alignment.Start,            verticalArrangement = Arrangement.Top        ) {            Text(                text = "Password",                fontWeight = FontWeight.Bold,                fontSize = 15.sp,                textAlign = TextAlign.Left            )            Spacer(modifier = Modifier.height(10.dp))            TextField(                value = password,                onValueChange = { password = it },                label = {                    Text(                        text = "Create your Password",                        fontWeight = FontWeight.SemiBold,                        fontSize = 14.sp,                        color = Color(0xFFB2B9CA)                    )                },                leadingIcon = {                    Icon(imageVector = Icons.Outlined.Lock, contentDescription = null)                },                colors = TextFieldDefaults.textFieldColors(                    unfocusedIndicatorColor = Color.Transparent,                    backgroundColor = Color(0xFFFBFBFD),                    cursorColor = Color(0xFFB2B9CA),                ),                modifier = Modifier.size(366.dp, 56.dp),                visualTransformation = PasswordVisualTransformation(),            )        }        Spacer(modifier = Modifier.height(10.dp))        Column(            horizontalAlignment = Alignment.Start,            verticalArrangement = Arrangement.Top        ) {            Row(                verticalAlignment = Alignment.CenterVertically,                horizontalArrangement = Arrangement.Start            ) {                Text(                    text = "Role",                    fontWeight = FontWeight.Bold,                    fontSize = 15.sp,                    textAlign = TextAlign.Left                )                RadioButton(                    selected = selectedRole == "user",                    onClick = { selectedRole = "user" }                )                Text(text = "User")                Spacer(modifier = Modifier.width(16.dp))                RadioButton(                    selected = selectedRole == "teacher",                    onClick = { selectedRole = "teacher" }                )                Text(text = "Teacher")            }        }        Spacer(modifier = Modifier.height(20.dp))        Button(            onClick = {                if (name.isEmpty() || email.isEmpty() || bio.isEmpty() || password.isEmpty() || imageUri == null) {                    Toast.makeText(context, "Please fill all details", Toast.LENGTH_SHORT).show()                } else {                    authViewModel.register(                        email,                        password,                        name,                        bio,                        userName,                        imageUri!!,                        selectedRole,                        context                    )                }            },            modifier = Modifier                .size(366.dp, 56.dp)                .background(color = Color(0xFFFF8450), shape = RoundedCornerShape(20.dp)),            colors = ButtonDefaults.buttonColors(containerColor = Color.Transparent),            shape = RoundedCornerShape(20.dp)        ) {            Text(                text = "Sign Up",                fontWeight = FontWeight.SemiBold,                fontSize = 16.sp,                color = Color.White            )        }        Row(            modifier = Modifier.fillMaxWidth(),            horizontalArrangement = Arrangement.Center,            verticalAlignment = Alignment.CenterVertically        ) {            Text(                text = "Already have an account?",                fontWeight = FontWeight.SemiBold,                fontSize = 14.sp,                color = black80            )            TextButton(onClick = {                navHostController.navigate(Routes.Login.routes) {                    popUpTo(navHostController.graph.startDestinationId)                    launchSingleTop = true                }            }) {                Text(                    text = "Sign In",                    fontWeight = FontWeight.SemiBold,                    fontSize = 14.sp,                    color = Color(0xFFFF8450),                )            }        }    }}