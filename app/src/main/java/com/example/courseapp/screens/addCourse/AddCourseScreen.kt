package com.example.courseapp.screens.addCourseimport android.Manifestimport android.net.Uriimport android.widget.Toastimport androidx.activity.compose.rememberLauncherForActivityResultimport androidx.activity.result.contract.ActivityResultContractsimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.PaddingValuesimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.foundation.text.BasicTextFieldimport androidx.compose.material.BackdropScaffoldimport androidx.compose.material.BackdropValueimport androidx.compose.material.DropdownMenuItemimport androidx.compose.material.ExperimentalMaterialApiimport androidx.compose.material.Surfaceimport androidx.compose.material.TextButtonimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Addimport androidx.compose.material.icons.filled.KeyboardArrowDownimport androidx.compose.material.icons.filled.KeyboardArrowUpimport androidx.compose.material.icons.filled.Placeimport androidx.compose.material.icons.outlined.Closeimport androidx.compose.material.rememberBackdropScaffoldStateimport androidx.compose.material3.Buttonimport androidx.compose.material3.ButtonDefaultsimport androidx.compose.material3.Cardimport androidx.compose.material3.CardDefaultsimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.ExposedDropdownMenuBoximport androidx.compose.material3.Iconimport androidx.compose.material3.Textimport androidx.compose.material3.TextFieldimport androidx.compose.material3.TextFieldDefaultsimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.getValueimport androidx.compose.runtime.livedata.observeAsStateimport androidx.compose.runtime.mutableStateListOfimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.draw.paintimport androidx.compose.ui.graphics.Brushimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.compose.ui.window.Dialogimport androidx.lifecycle.viewmodel.compose.viewModelimport androidx.navigation.NavHostControllerimport coil.compose.rememberAsyncImagePainterimport com.example.courseapp.ViewModel.AddCourseViewModelimport com.example.courseapp.ViewModel.CategoryViewModelimport com.example.courseapp.model.Categoryimport com.example.courseapp.model.Lessonimport com.example.courseapp.navigation.Routesimport com.example.courseapp.screens.component.HeaderScreenimport com.example.courseapp.ui.theme.black80import com.example.courseapp.ui.theme.gray80import com.example.courseapp.ui.theme.white80import com.example.courseapp.utils.SharePrefimport com.google.firebase.auth.FirebaseAuth@OptIn(ExperimentalMaterialApi::class, ExperimentalMaterial3Api::class)@Composablefun AddCourseScreen(navHostController: NavHostController) {    val courseViewModel: AddCourseViewModel = viewModel()    val isPosted by courseViewModel.isPosted.observeAsState()    val categoryViewModel: CategoryViewModel = viewModel()//    Categories    val categories by categoryViewModel.categories.observeAsState(emptyList())    var expanded by remember { mutableStateOf(false) }    var selectedCategory by remember { mutableStateOf<Category?>(null) }//    COURSE    var title by remember { mutableStateOf("") }    var content by remember { mutableStateOf("") }    var chapter by remember { mutableStateOf("") }    var classes by remember { mutableStateOf("") }    var duration by remember { mutableStateOf("") }    var imageUri by remember { mutableStateOf<Uri?>(null) }    var price by remember { mutableStateOf("") }//    LESSON    var lessonTitle by remember { mutableStateOf("") }    var lessonContent by remember { mutableStateOf("") }    var lessonDuration by remember { mutableStateOf("") }    val lessons = remember { mutableStateListOf<Lesson>() }    var showDialog by remember { mutableStateOf(false) }    val context = LocalContext.current    val firebaseAuth = FirebaseAuth.getInstance()    val launcher = rememberLauncherForActivityResult(contract = ActivityResultContracts.GetContent()) { uri: Uri? ->        imageUri = uri    }    val permissionLauncher = rememberLauncherForActivityResult(contract = ActivityResultContracts.RequestPermission()) { isGranted: Boolean ->        if (isGranted) {            launcher.launch("image/*")        } else {            Toast.makeText(context, "Permission denied", Toast.LENGTH_SHORT).show()        }    }    LaunchedEffect(isPosted) {        if (isPosted == true) {            title = ""            content = ""            chapter = ""            classes = ""            duration = ""            imageUri = null            lessonTitle = ""            lessonContent = ""            lessonDuration = ""            lessons.clear()            Toast.makeText(context, "Course added", Toast.LENGTH_LONG).show()            navHostController.navigate(Routes.BottomNav.routes) {                popUpTo(Routes.Home.routes) {                    inclusive = true                }            }        }    }    val gradientColors = listOf(        Color(0xFFFF8450),        Color(0xFFFFAC71),    )    val gradientBrush = Brush.horizontalGradient(gradientColors)    val scaffoldState = rememberBackdropScaffoldState(BackdropValue.Revealed)    LaunchedEffect(scaffoldState) {        scaffoldState.reveal()    }    if (showDialog) {        AddLessonDialog(            lessonTitle = lessonTitle,            onLessonTitleChange = { lessonTitle = it },            lessonContent = lessonContent,            onLessonContentChange = { lessonContent = it },            lessonDuration = lessonDuration,            onLessonDurationChange = { lessonDuration = it },            onDismiss = { showDialog = false },            onAdd = {                lessons.add(Lesson(lessonTitle, lessonContent, lessonDuration))                lessonTitle = ""                lessonContent = ""                lessonDuration = ""                showDialog = false            }        )    }    BackdropScaffold(        scaffoldState = scaffoldState,        frontLayerScrimColor = Color.Transparent,        frontLayerBackgroundColor = white80,        appBar = {            Box(                modifier = Modifier                    .paint(                        painter = rememberAsyncImagePainter(                            model = imageUri ?: SharePref.getImage(                                context                            )                        ),                        contentScale = ContentScale.FillWidth                    )                    .padding(25.dp, 10.dp)            ){                Column {                    Row(                        horizontalArrangement = Arrangement.Center,                        verticalAlignment = Alignment.CenterVertically,                    ) {                       HeaderScreen()                    }                }                Spacer(modifier = Modifier.height(10.dp))            }        },        backLayerContent = {        },        modifier = Modifier.background(white80),        frontLayerContent = {            Column(                Modifier                    .fillMaxWidth()                    .padding(25.dp),                verticalArrangement =Arrangement.spacedBy(10.dp),            ) {                Row(                    horizontalArrangement = Arrangement.SpaceBetween,                    verticalAlignment = Alignment.CenterVertically,                    modifier = Modifier.fillMaxWidth()                ) {                    Column{                        BasicTextFieldWithHintTitle(                            hint = "Enter your title ...",                            value =title,                            onValueChange ={title = it},                            modifier = Modifier                        )                        Spacer(modifier = Modifier.padding(bottom = 5.dp))                        Text(                            text = "By "+SharePref.getUserName(context),                            fontWeight = FontWeight.ExtraBold,                            fontSize = 13.sp,                            color = gray80,                            textAlign = TextAlign.Start                        )                    }                    if (imageUri == null) {                        Icon(                            imageVector = Icons.Default.Place,                            contentDescription = null,                            modifier = Modifier.clickable {                                permissionLauncher.launch(Manifest.permission.READ_EXTERNAL_STORAGE)                            }                        )                    } else {                        Icon(                            imageVector = Icons.Outlined.Close,                            contentDescription = null,                            modifier = Modifier.clickable {                                imageUri = null                            }                        )                    }                }                Spacer(modifier = Modifier.height(15.dp))                Row(                    modifier = Modifier.fillMaxWidth(),                    horizontalArrangement =Arrangement.SpaceBetween                ){                    Card(                        colors = CardDefaults.cardColors(containerColor = Color(0x33ffc22a)),                        modifier = Modifier                            .size(108.dp, 67.dp)                            .clip(shape = RoundedCornerShape(10.dp))                    ){                        Column(                            modifier = Modifier.fillMaxSize(),                            horizontalAlignment = Alignment.CenterHorizontally,                            verticalArrangement = Arrangement.Center                        ){                            BasicTextFieldWithHintChapter(                                hint = "00",                                value = chapter,                                onValueChange = {chapter = it},                                modifier = Modifier                            )                            Text(                                text = "Chapters",                                fontSize = 14.sp,                                fontWeight = FontWeight.Normal                            )                        }                    }                    Card(                        colors = CardDefaults.cardColors(containerColor = Color(0x33fb693c)),                        modifier = Modifier                            .size(108.dp, 67.dp)                            .clip(shape = RoundedCornerShape(10.dp))                    ){                        Column(                            modifier = Modifier.fillMaxSize(),                            horizontalAlignment = Alignment.CenterHorizontally,                            verticalArrangement = Arrangement.Center                        ){                            BasicTextFieldWithHintClass(                                hint = "00",                                value = classes,                                onValueChange = {classes = it},                                modifier = Modifier                            )                            Text(                                text = "Classes",                                fontSize = 14.sp,                                fontWeight = FontWeight.Normal                            )                        }                    }                    Card(                        colors = CardDefaults.cardColors(containerColor = Color(0x332dd186)),                        modifier = Modifier                            .size(108.dp, 67.dp)                            .clip(shape = RoundedCornerShape(10.dp))                    ){                        Column(                            modifier = Modifier.fillMaxSize(),                            horizontalAlignment = Alignment.CenterHorizontally,                            verticalArrangement = Arrangement.Center                        ){                            BasicTextFieldWithHintDuration(                                hint = "00",                                value = duration,                                onValueChange = {duration = it},                                modifier = Modifier                            )                            Text(                                text = "Duration",                                fontSize = 14.sp,                                fontWeight = FontWeight.Normal                            )                        }                    }                }                Spacer(modifier = Modifier.height(15.dp))                Column(                    modifier = Modifier.fillMaxWidth()                ){                    Text(                        text = "About Course",                        color = black80,                        fontSize = 20.sp,                        fontWeight = FontWeight.Bold                    )                    Spacer(modifier = Modifier.height(10.dp))                    BasicTextFieldWithHintContent(                        hint = "Enter your about Course...",                        value = content,                        onValueChange = {content = it},                        modifier = Modifier                    )                }                Spacer(modifier = Modifier.height(10.dp))                TextField(                    value = price,                    onValueChange = { price = it },                    label = { Text("Enter course price...") },                    modifier = Modifier.fillMaxWidth(),                    colors = TextFieldDefaults.textFieldColors(                        unfocusedIndicatorColor = Color.Transparent,                        containerColor = Color.White,                    )                )                Spacer(modifier = Modifier.height(10.dp))                ExposedDropdownMenuBox(                    expanded = expanded,                    onExpandedChange = { expanded = !expanded },                ) {                    TextField(                        readOnly = true,                        value = selectedCategory?.name ?: "Select Category",                        onValueChange = { },                        label = { Text("Category") },                        trailingIcon = {                            Icon(                                imageVector = if (expanded) Icons.Filled.KeyboardArrowUp else Icons.Filled.KeyboardArrowDown,                                contentDescription = null                            )                        },                        colors = TextFieldDefaults.textFieldColors(                            unfocusedIndicatorColor = Color.Transparent,                            containerColor = Color.White,                        ),                        modifier = Modifier                            .fillMaxWidth()                            .menuAnchor()                    )                    ExposedDropdownMenu(                        expanded = expanded,                        onDismissRequest = { expanded = false }                    ) {                        categories.forEach { category ->                            DropdownMenuItem(                                onClick = {                                    selectedCategory = category                                    expanded = false                                }                            ) {                                Text(category.name)                            }                        }                    }                }                Spacer(modifier = Modifier.height(15.dp))                Row(                    horizontalArrangement = Arrangement.Center,                    verticalAlignment = Alignment.CenterVertically,                    modifier = Modifier.fillMaxWidth()                ) {                    Text(                        text = "Lessons",                        color = black80,                        fontSize = 20.sp,                        fontWeight = FontWeight.Bold                    )                    Spacer(modifier = Modifier.weight(1f))                    Button(                        onClick = { showDialog = true },                        modifier = Modifier.padding(start = 8.dp),                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFFF8450))                    ) {                        Icon(imageVector = Icons.Default.Add, contentDescription = null)                        Spacer(modifier = Modifier.width(4.dp))                        Text(text = "Add Lesson")                    }                }                Spacer(modifier = Modifier.height(8.dp))                lessons.forEach { lesson ->                    LessonItem(lesson = lesson)                }                Spacer(modifier = Modifier.height(15.dp))                Column(                    horizontalAlignment = Alignment.CenterHorizontally,                    verticalArrangement = Arrangement.Center,                    modifier = Modifier.fillMaxSize()                ) {                    Button(                        onClick = {                            if (firebaseAuth.currentUser == null) {                                Toast.makeText(context, "Please log in", Toast.LENGTH_SHORT).show()                            } else {                                if (imageUri == null) {                                    courseViewModel.saveData(                                        title = title,                                        content = content,                                        chapter = chapter,                                        classes = classes,                                        duration = duration,                                        userId = firebaseAuth.currentUser!!.uid,                                        imageUrl = "",                                        categoryId = selectedCategory?.id ?: "",                                        lessons = lessons.toList() ,                                        price = price,                                    )                                } else {                                    courseViewModel.saveImage(                                        title = title,                                        content = content,                                        chapter = chapter,                                        classes = classes,                                        duration = duration,                                        userId = firebaseAuth.currentUser!!.uid,                                        imageUri = imageUri!!,                                        categoryId = selectedCategory?.id ?: "",                                        lessons = lessons.toList(),                                        price = price                                    )                                }                            }                        },                        modifier = Modifier                            .size(200.dp, 50.dp)                            .fillMaxSize()                            .background(brush = gradientBrush, shape = RoundedCornerShape(10.dp)),                        colors = ButtonDefaults.buttonColors(containerColor = Color.Transparent),                        shape = RoundedCornerShape(10.dp),                    ) {                        Text(                            text = "Next",                            fontWeight = FontWeight.SemiBold,                            fontSize = 16.sp,                            color = Color.White                        )                    }                }            }        }    )}@OptIn(ExperimentalMaterial3Api::class)@Composablefun AddLessonDialog(    lessonTitle: String,    onLessonTitleChange: (String) -> Unit,    lessonContent: String,    onLessonContentChange: (String) -> Unit,    lessonDuration: String,    onLessonDurationChange: (String) -> Unit,    onDismiss: () -> Unit,    onAdd: () -> Unit) {    Dialog(        onDismissRequest = onDismiss,    ){        Surface(            shape = RoundedCornerShape(20.dp),            color = white80,        ) {            LazyColumn(contentPadding = PaddingValues(12.dp)) {                item {                    Row(                        Modifier.fillMaxSize(),                        horizontalArrangement = Arrangement.Center                    ) {                        Text(                            text = "Lesson",                            fontSize = 18.sp,                            fontWeight = FontWeight.Bold                        )                    }                }                item {                    Spacer(modifier = Modifier.height(20.dp))                    Column {                        TextField(                            value = lessonTitle,                            onValueChange = onLessonTitleChange,                            shape = RoundedCornerShape(10.dp),                            label = { androidx.compose.material.Text("Title") },                            modifier = Modifier.fillMaxWidth(),                            colors = TextFieldDefaults.textFieldColors(                                unfocusedIndicatorColor = Color.Transparent,                                containerColor = Color.White,                            )                        )                        Spacer(modifier = Modifier.height(12.dp))                        TextField(                            value = lessonContent,                            onValueChange = onLessonContentChange,                            shape = RoundedCornerShape(10.dp),                            label = { androidx.compose.material.Text("Content") },                            modifier = Modifier.fillMaxWidth(),                            colors = TextFieldDefaults.textFieldColors(                                unfocusedIndicatorColor = Color.Transparent,                                containerColor = Color.White,                            )                        )                        Spacer(modifier = Modifier.height(12.dp))                        TextField(                            value = lessonDuration,                            onValueChange = onLessonDurationChange,                            shape = RoundedCornerShape(10.dp),                            label = { Text("Duration") },                            modifier = Modifier.fillMaxWidth(),                            colors = TextFieldDefaults.textFieldColors(                                unfocusedIndicatorColor = Color.Transparent,                                containerColor = Color.White,                            )                        )                    }                }                item {                    Spacer(modifier = Modifier.height(12.dp))                    Row(                        horizontalArrangement = Arrangement.End,                        modifier = Modifier.fillMaxWidth()                    ) {                        Button(                            onClick = onAdd,                            Modifier.padding(horizontal = 12.dp),                            colors = ButtonDefaults.buttonColors(                                containerColor = Color.Black,                                contentColor = Color.Black                            )                        ) {                            Text("Add", color = white80)                        }                        TextButton(onClick = onDismiss) {                            Text("Cancel", color = black80)                        }                    }                }            }        }    }}@Composablefun LessonItem(lesson: Lesson) {    Card(        modifier = Modifier            .fillMaxWidth()            .padding(vertical = 4.dp),    ) {        Column(            modifier = Modifier.padding(16.dp)        ) {            Text(text = lesson.lessonTitle, fontWeight = FontWeight.Bold, fontSize = 16.sp)            Text(text = lesson.lessonContent, fontSize = 14.sp, modifier = Modifier.padding(top = 4.dp))            Text(text = lesson.lessonDuration, fontSize = 12.sp, color = Color.Gray, modifier = Modifier.padding(top = 4.dp))        }    }}@Composablefun BasicTextFieldWithHintTitle (    hint: String,    value:String,    onValueChange:(String) ->Unit,    modifier:Modifier) {    Box(modifier = modifier) {        if (value.isEmpty()) {            Text(                text = hint,                color = Color.Black.copy(alpha = 0.8f),                style = TextStyle.Default.copy(                    fontWeight = FontWeight.Bold,                    fontSize = 24.sp,                    textAlign = TextAlign.Start                )            )        }        BasicTextField(            value = value,            onValueChange = onValueChange,            textStyle = TextStyle.Default.copy(                color = Color.Black.copy(alpha = 0.8f),                fontWeight = FontWeight.Bold,                fontSize = 24.sp,                textAlign = TextAlign.Start            )        )    }}@Composablefun BasicTextFieldWithHintContent (    hint: String,    value:String,    onValueChange:(String) ->Unit,    modifier:Modifier) {    Box(modifier = modifier) {        if (value.isEmpty()) {            Text(                text = hint,                color = Color(0xFFC3C2C2).copy(alpha = 0.8f),                style = TextStyle.Default.copy(                    fontWeight = FontWeight.SemiBold,                    fontSize = 15.sp,                    textAlign = TextAlign.Start                )            )        }        BasicTextField(            value = value,            onValueChange = onValueChange,            textStyle = TextStyle.Default.copy(                color = Color(0xFFC3C2C2).copy(alpha = 0.8f),                fontWeight = FontWeight.SemiBold,                fontSize = 12.sp,                textAlign = TextAlign.Start            )        )    }}@Composablefun BasicTextFieldWithHintChapter (    hint: String,    value:String,    onValueChange:(String) ->Unit,    modifier:Modifier,) {    Box(        contentAlignment = Alignment.Center    ) {        if (value.isEmpty()) {            Text(                text = hint,                color = Color(0xffFFC22A).copy(alpha = 0.8f),                style = TextStyle.Default.copy(                    fontWeight = FontWeight.Bold,                    fontSize = 24.sp,                )            )        }        BasicTextField(            value = value,            onValueChange = onValueChange,            textStyle = TextStyle.Default.copy(                color = Color(0xffFFC22A).copy(alpha = 0.8f),                fontWeight = FontWeight.Bold,                fontSize = 24.sp,            )        )    }}@Composablefun BasicTextFieldWithHintClass (    hint: String,    value:String,    onValueChange:(String) ->Unit,    modifier:Modifier) {    Box(contentAlignment = Alignment.Center) {        if (value.isEmpty()) {            Text(                text = hint,                color = Color(0xffFF5050).copy(alpha = 0.8f),                style = TextStyle.Default.copy(                    fontWeight = FontWeight.Bold,                    fontSize = 24.sp,                    textAlign = TextAlign.Center                )            )        }        BasicTextField(            value = value,            onValueChange = onValueChange,            textStyle = TextStyle.Default.copy(                color = Color(0xffFF5050).copy(alpha = 0.8f),                fontWeight = FontWeight.Bold,                fontSize = 24.sp,            )        )    }}@Composablefun BasicTextFieldWithHintDuration (    hint: String,    value:String,    onValueChange:(String) ->Unit,    modifier:Modifier) {    Box(contentAlignment = Alignment.Center) {        if (value.isEmpty()) {            Text(                text = hint,                color = Color(0xff2DD186).copy(alpha = 0.8f),                style = TextStyle.Default.copy(                    fontWeight = FontWeight.Bold,                    fontSize = 24.sp,                )            )        }        BasicTextField(            value = value,            onValueChange = onValueChange,            textStyle = TextStyle.Default.copy(                color = Color(0xff2DD186).copy(alpha = 0.8f),                fontWeight = FontWeight.Bold,                fontSize = 24.sp,            )        )    }}