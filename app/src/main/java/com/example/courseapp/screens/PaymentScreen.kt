//import android.widget.Toast//import androidx.compose.foundation.background//import androidx.compose.foundation.layout.Arrangement//import androidx.compose.foundation.layout.Column//import androidx.compose.foundation.layout.fillMaxWidth//import androidx.compose.foundation.layout.padding//import androidx.compose.foundation.layout.size//import androidx.compose.material3.Button//import androidx.compose.material3.Card//import androidx.compose.material3.CardDefaults//import androidx.compose.material3.ExperimentalMaterial3Api//import androidx.compose.material3.Text//import androidx.compose.material3.TextField//import androidx.compose.material3.TextFieldDefaults//import androidx.compose.runtime.Composable//import androidx.compose.runtime.getValue//import androidx.compose.runtime.mutableStateOf//import androidx.compose.runtime.remember//import androidx.compose.runtime.setValue//import androidx.compose.ui.Alignment//import androidx.compose.ui.Modifier//import androidx.compose.ui.graphics.Color//import androidx.compose.ui.platform.LocalContext//import androidx.compose.ui.text.font.FontWeight//import androidx.compose.ui.text.style.TextAlign//import androidx.compose.ui.tooling.preview.Preview//import androidx.compose.ui.unit.dp//import androidx.compose.ui.unit.sp//import com.example.courseapp.ui.theme.gray40//import com.stripe.android.PaymentConfiguration//import com.stripe.android.Stripe//import com.stripe.android.model.CardParams//import com.stripe.android.model.ConfirmPaymentIntentParams//import com.stripe.android.model.PaymentMethodCreateParams//import com.stripe.android.model.PaymentMethod//import com.stripe.android.view.CardInputWidget////@OptIn(ExperimentalMaterial3Api::class)//@Preview(showSystemUi = true)//@Composable//fun PaymentScreen() {//    var cardNumber by remember {//        mutableStateOf("")//    }//    var cardName by remember {//        mutableStateOf("")//    }//    var CCV by remember {//        mutableStateOf("")//    }//    var Date by remember {//        mutableStateOf("")//    }//    val context = LocalContext.current////    Column(//        modifier = Modifier.padding(20.dp),//    ) {//        Text(//            text = "Select Payment",//            fontWeight = FontWeight.Bold,//            fontSize = 20.sp,//            textAlign = TextAlign.Start//        )//        Text(//            text = "Add New Card",//            fontWeight = FontWeight.Bold,//            fontSize = 20.sp,//            textAlign = TextAlign.Start//        )//        Card(//            colors = CardDefaults.cardColors(//                containerColor = Color.White//            )//        ) {//            Column(//                modifier = Modifier.padding(20.dp),//                verticalArrangement = Arrangement.spacedBy(10.dp)//            ) {//                Text(//                    text = "Card Number",//                    fontWeight = FontWeight.Bold,//                    fontSize = 14.sp,//                    textAlign = TextAlign.Start//                )//                TextField(//                    value = cardNumber,//                    onValueChange = { cardNumber = it },//                    label = { Text("XXXXXXX XXX XXXXXXX") },//                    modifier = Modifier.fillMaxWidth(),//                    colors = TextFieldDefaults.textFieldColors(//                        unfocusedIndicatorColor = Color.Transparent,//                        containerColor = gray40,//                    )//                )//                Text(//                    text = "Card holder name",//                    fontWeight = FontWeight.Bold,//                    fontSize = 14.sp,//                    textAlign = TextAlign.Start//                )//                TextField(//                    value = cardName,//                    onValueChange = { cardName = it },//                    label = { Text("Your name here") },//                    modifier = Modifier.fillMaxWidth(),//                    colors = TextFieldDefaults.textFieldColors(//                        unfocusedIndicatorColor = Color.Transparent,//                        containerColor = gray40,//                    )//                )//                Text(//                    text = "CCV",//                    fontWeight = FontWeight.Bold,//                    fontSize = 14.sp,//                    textAlign = TextAlign.Start//                )//                TextField(//                    value = CCV,//                    onValueChange = { CCV = it },//                    label = { Text("XXXXXX") },//                    modifier = Modifier.fillMaxWidth(),//                    colors = TextFieldDefaults.textFieldColors(//                        unfocusedIndicatorColor = Color.Transparent,//                        containerColor = gray40,//                    )//                )//                Text(//                    text = "Expired Date",//                    fontWeight = FontWeight.Bold,//                    fontSize = 14.sp,//                    textAlign = TextAlign.Start//                )//                TextField(//                    value = Date,//                    onValueChange = { Date = it },//                    label = { Text("XX-XX-XXXX") },//                    modifier = Modifier.fillMaxWidth(),//                    colors = TextFieldDefaults.textFieldColors(//                        unfocusedIndicatorColor = Color.Transparent,//                        containerColor = gray40,//                    )//                )//            }//        }////        Button(//            onClick = {//                val cardParams = PaymentMethodCreateParams.Card(//                    number = cardNumber,//                    expMonth = Date.split("-")[0].toInt(),//                    expYear = Date.split("-")[1].toInt(),//                    cvc = CCV//                )//                val billingDetails = PaymentMethod.BillingDetails.Builder()//                    .setName(cardName)//                    .build()//                val params = PaymentMethodCreateParams.create(cardParams, billingDetails)//                val clientSecret = "your-client-secret" // Get this from your server//                val confirmParams = ConfirmPaymentIntentParams.createWithPaymentMethodCreateParams(//                    params, clientSecret//                )////                val stripe = Stripe(context, PaymentConfiguration.getInstance(context).publishableKey)//                stripe.confirmPayment(context, confirmParams)//            }//        ) {//            Text(text = "Thanh to√°n")//        }//    }//}