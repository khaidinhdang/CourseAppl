package com.example.courseapp.screens.Homeimport android.Manifestimport android.net.Uriimport android.widget.Toastimport androidx.activity.compose.rememberLauncherForActivityResultimport androidx.activity.result.contract.ActivityResultContractsimport androidx.compose.foundation.*import androidx.compose.foundation.layout.*import androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.LazyRowimport androidx.compose.foundation.lazy.itemsimport androidx.compose.foundation.shape.CircleShapeimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.foundation.text.KeyboardActionsimport androidx.compose.foundation.text.KeyboardOptionsimport androidx.compose.material.BackdropScaffoldimport androidx.compose.material.BackdropValueimport androidx.compose.material.ExperimentalMaterialApiimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Addimport androidx.compose.material.icons.filled.Searchimport androidx.compose.material.rememberBackdropScaffoldStateimport androidx.compose.material3.*import androidx.compose.runtime.*import androidx.compose.runtime.livedata.observeAsStateimport androidx.compose.runtime.saveable.rememberSaveableimport androidx.compose.ui.Alignmentimport androidx.compose.ui.ExperimentalComposeUiApiimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.draw.shadowimport androidx.compose.ui.graphics.Brushimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.platform.LocalSoftwareKeyboardControllerimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.input.ImeActionimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.compose.ui.window.Dialogimport androidx.lifecycle.viewmodel.compose.viewModelimport androidx.navigation.NavControllerimport androidx.navigation.NavHostControllerimport coil.compose.rememberAsyncImagePainterimport coil.compose.rememberImagePainterimport com.example.courseapp.Rimport com.example.courseapp.ViewModel.CategoryViewModelimport com.example.courseapp.ViewModel.CourseWithUserimport com.example.courseapp.ViewModel.HomeViewModelimport com.example.courseapp.model.Categoryimport com.example.courseapp.model.Notesimport com.example.courseapp.navigation.Routesimport com.example.courseapp.screens.component.HeaderScreenimport com.example.courseapp.ui.theme.black80import com.example.courseapp.ui.theme.gray40import com.example.courseapp.ui.theme.gray80import com.example.courseapp.ui.theme.white80import java.util.UUID@OptIn(ExperimentalMaterialApi::class, ExperimentalMaterial3Api::class)@Composablefun HomeScreen(navHostController: NavHostController) {    val homeViewModel: HomeViewModel = viewModel()    val categoryViewModel: CategoryViewModel = viewModel()    val courseAndUsers by homeViewModel.courseAndUsers.observeAsState()    val searchResults by homeViewModel.searchResults.observeAsState()    val categories by categoryViewModel.categories.observeAsState(emptyList())    val filteredCourses by homeViewModel.filteredCourses.observeAsState()    val isPosted by categoryViewModel.isPosted.observeAsState(false)    var searchText by rememberSaveable { mutableStateOf("") }    var showDialog by rememberSaveable { mutableStateOf(false) }    val context = LocalContext.current    var name by remember { mutableStateOf("") }    var imageUri by remember { mutableStateOf<Uri?>(null) }    LaunchedEffect(searchText) {        homeViewModel.searchCourses(searchText)    }    val gradientColors = listOf(        Color(0xFFFF8450),        Color(0xFFFFAC71)    )    val gradientBrush = Brush.linearGradient(gradientColors)    val scaffoldState = rememberBackdropScaffoldState(BackdropValue.Revealed)    LaunchedEffect(scaffoldState) {        scaffoldState.reveal()    }    BackdropScaffold(        scaffoldState = scaffoldState,        frontLayerScrimColor = Color.Transparent,        peekHeight = 70.dp,        persistentAppBar = false,        appBar = {            Column(                Modifier.padding(top = 10.dp, start = 25.dp, end = 25.dp),                verticalArrangement = Arrangement.spacedBy(12.dp)            ) {                Row(                    horizontalArrangement = Arrangement.Center,                    verticalAlignment = Alignment.CenterVertically,                    modifier = Modifier.fillMaxWidth()                ) {                    val keyboardController = LocalSoftwareKeyboardController.current                    TextField(                        leadingIcon = {                            Icon(                                Icons.Default.Search,                                contentDescription = null,                                tint = Color(0xff2A3447)                            )                        },                        value = searchText,                        onValueChange = { searchText = it },                        placeholder = { Text(text = "Search course", color = Color(0xff2A3447), fontSize = 16.sp, fontWeight = FontWeight.Normal) },                        shape = RoundedCornerShape(10.dp),                        keyboardOptions = KeyboardOptions(                            imeAction = ImeAction.Done                        ),                        keyboardActions = KeyboardActions(                            onDone = {                                keyboardController?.hide()                            }                        ),                        colors = TextFieldDefaults.textFieldColors(                            unfocusedIndicatorColor = Color.Transparent,                            containerColor = Color.White                        ),                        modifier = Modifier                            .fillMaxWidth(0.8f)                            .size(280.dp, 50.dp)                            .shadow(5.dp, RoundedCornerShape(10.dp), spotColor = Color(0xFFFBFBFB))                    )                    Spacer(modifier = Modifier.weight(1f))                    Box(                        modifier = Modifier                            .background(Color(0xffFF7171), shape = RoundedCornerShape(10.dp))                            .size(50.dp)                    ) {                        Column(                            Modifier.fillMaxSize(),                            horizontalAlignment = Alignment.CenterHorizontally,                            verticalArrangement = Arrangement.Center                        ) {                            Icon(painter = painterResource(id = R.drawable.feather_sliders), contentDescription = null,                                Modifier.size(24.dp), tint = Color.White)                        }                    }                }                Spacer(modifier = Modifier.height(15.dp))            }        },        backLayerContent = {            Column(                Modifier.padding(top = 10.dp, start = 25.dp, end = 25.dp),                verticalArrangement = Arrangement.spacedBy(12.dp)            ) {                HeaderScreen()                Text(                    text = "Find your favorite startup course here",                    fontSize = 24.sp,                    fontWeight = FontWeight.Bold,                    color = Color(0xFF2A3447)                )                Row(                    horizontalArrangement = Arrangement.Center,                    verticalAlignment = Alignment.CenterVertically,                    modifier = Modifier.fillMaxWidth()                ) {                    val keyboardController = LocalSoftwareKeyboardController.current                    TextField(                        leadingIcon = {                            Icon(                                Icons.Default.Search,                                contentDescription = null,                                tint = Color(0xff2A3447)                            )                        },                        value = searchText,                        onValueChange = { searchText = it },                        placeholder = { Text(text = "Search course", color = Color(0xff2A3447), fontSize = 16.sp, fontWeight = FontWeight.Normal) },                        shape = RoundedCornerShape(10.dp),                        keyboardOptions = KeyboardOptions(                            imeAction = ImeAction.Done                        ),                        keyboardActions = KeyboardActions(                            onDone = {                                keyboardController?.hide()                            }                        ),                        colors = TextFieldDefaults.textFieldColors(                            unfocusedIndicatorColor = Color.Transparent,                            containerColor = Color.White                        ),                        modifier = Modifier                            .fillMaxWidth(0.8f)                            .size(280.dp, 50.dp)                            .shadow(5.dp, RoundedCornerShape(10.dp), spotColor = Color(0xFFFBFBFB))                    )                    Spacer(modifier = Modifier.weight(1f))                    Box(                        modifier = Modifier                            .background(Color(0xffFF7171), shape = RoundedCornerShape(10.dp))                            .size(50.dp)                    ) {                        Column(                            Modifier.fillMaxSize(),                            horizontalAlignment = Alignment.CenterHorizontally,                            verticalArrangement = Arrangement.Center                        ) {                            Icon(painter = painterResource(id = R.drawable.feather_sliders), contentDescription = null,                                Modifier.size(24.dp), tint = Color.White)                        }                    }                }                Spacer(modifier = Modifier.height(15.dp))            }        },        modifier = Modifier.background(brush = gradientBrush),        frontLayerBackgroundColor = white80,        frontLayerContent = {            Column(                modifier = Modifier                    .fillMaxSize()                    .padding(start = 25.dp, end = 25.dp, bottom = 25.dp, top = 15.dp),                horizontalAlignment = Alignment.CenterHorizontally,                verticalArrangement = Arrangement.Top            ){                Spacer(modifier = Modifier.height(20.dp))                Row(                    modifier = Modifier.fillMaxWidth(),                    horizontalArrangement = Arrangement.SpaceBetween                ) {                    Text(                        text = "Categories",                        fontSize = 20.sp,                        fontWeight = FontWeight.Bold,                        color = black80                    )                }                CategoryList(categories = categories) { category ->                    homeViewModel.filterCoursesByCategory(category.id)                }                Spacer(modifier = Modifier.height(20.dp))                Row(                    modifier = Modifier.fillMaxWidth(),                    horizontalArrangement = Arrangement.SpaceBetween,                    verticalAlignment = Alignment.CenterVertically                ) {                    Text(                        text = "Trending Courses",                        fontSize = 20.sp,                        fontWeight = FontWeight.Bold,                        color = black80                    )                    Spacer(modifier = Modifier.weight(1f))                    Text(                        text = "view all",                        fontSize = 16.sp,                        color = Color(0xFFFF5050)                    )                }                if (searchText.isNotEmpty() && searchResults.isNullOrEmpty()) {                    Text(                        text = "No search results found",                        modifier = Modifier.padding(16.dp)                    )                } else if (!searchResults.isNullOrEmpty()) {                    CourseList(courseAndUsers = searchResults!!, navHostController)                } else {                    val displayCourses = filteredCourses ?: courseAndUsers                    if (displayCourses.isNullOrEmpty()) {                        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {                            CircularProgressIndicator()                        }                    } else {                        CourseList(courseAndUsers = displayCourses, navHostController)                    }                }            }        }    )    LaunchedEffect(isPosted) {        if (isPosted == true) {            name = ""            imageUri = null            Toast.makeText(context, "Course added", Toast.LENGTH_LONG).show()            navHostController.navigate(Routes.BottomNav.routes) {                popUpTo(Routes.Home.routes) {                    inclusive = true                }            }        }    }    if (showDialog) {        AddCategoryDialog(            onDismiss = { showDialog = false },            onCategoryAdded = { name, imageUri ->                categoryViewModel.saveImage(name, imageUri)                showDialog = false            }        )    }}@OptIn(ExperimentalMaterial3Api::class)@Composablefun AddCategoryDialog(    onDismiss: () -> Unit,    onCategoryAdded: (name: String, imageUri: Uri) -> Unit) {    var name by remember { mutableStateOf("") }    var imageUri by remember { mutableStateOf<Uri?>(null) }    val launcher = rememberLauncherForActivityResult(        contract = ActivityResultContracts.GetContent()    ) { uri: Uri? ->        imageUri = uri    }    val keyboardController = LocalSoftwareKeyboardController.current    Dialog(onDismissRequest = {onDismiss()}) {        Surface(            shape = RoundedCornerShape(12.dp),            color = Color(0xFFFBFBFD),        ) {            LazyColumn(contentPadding = PaddingValues(12.dp)) {                item{                    Row(                        Modifier.fillMaxSize(),                        horizontalArrangement = Arrangement.Center                    ){                        Text(                            text = "Add Category",                            fontSize = 18.sp,                            fontWeight = FontWeight.Bold                        )                    }                }                item{                    Spacer(modifier = Modifier.height(16.dp))                    TextField(                        value =name,                        onValueChange = {                            name = it                        },                        label = { Text(text = "Category Name") },                        shape = RoundedCornerShape(10.dp),                        keyboardOptions = KeyboardOptions(                            imeAction = ImeAction.Done                        ),                        keyboardActions = KeyboardActions(                            onDone = {                                keyboardController?.hide()                            },                            onSearch = {                            }                        ),                        colors = TextFieldDefaults.textFieldColors(                            unfocusedIndicatorColor = Color.Transparent,                            containerColor = Color.White,                            )                    )                }                item{                    Spacer(modifier = Modifier.height(16.dp))                    Button(                        onClick = { launcher.launch("image/*") },                        modifier = Modifier.fillMaxWidth()                    ) {                        Text(text = "Select Image")                    }                    Spacer(modifier = Modifier.height(8.dp))                    imageUri?.let {                        Image(                            painter = rememberImagePainter(it),                            contentDescription = "Selected Image",                            modifier = Modifier                                .fillMaxWidth()                                .height(200.dp)                                .clip(RoundedCornerShape(10.dp))                                .background(Color.LightGray),                            contentScale = ContentScale.Crop                        )                    }                }                item{                    Row(                        Modifier.fillMaxSize(),                        horizontalArrangement = Arrangement.Center                    ){                        Button(                            onClick = {                                imageUri?.let { onCategoryAdded(name, it) }                            },                            Modifier.padding(horizontal = 12.dp),                            colors = ButtonDefaults.buttonColors(                                containerColor = Color.Black,                                contentColor = Color.Black                            )                        ) {                            Text("Add", color = Color.White)                        }                    }                }            }        }    }}@Composablefun CategoryList(categories: List<Category>, onCategoryClick: (Category) -> Unit) {    Spacer(modifier = Modifier.height(16.dp))    LazyRow(        horizontalArrangement = Arrangement.spacedBy(15.dp),    ) {        items(categories) { category ->            CategoryItem(category = category, onCategoryClick = onCategoryClick, modifier = Modifier.padding(8.dp))        }    }}@Composablefun CategoryItem(category: Category, onCategoryClick: (Category) -> Unit, modifier: Modifier = Modifier) {    Card(        modifier = Modifier            .size(90.dp, 98.dp)            .clickable { onCategoryClick(category) },        colors = CardDefaults.cardColors(containerColor = Color(0xFF3A3A3C))    ) {        Column(            horizontalAlignment = Alignment.CenterHorizontally,            verticalArrangement = Arrangement.Center,            modifier = Modifier.fillMaxSize()        ) {            Image(                painter = rememberAsyncImagePainter(model = category.imageUrl),                contentDescription = null,                modifier = Modifier.size(50.dp)            )            Spacer(modifier = Modifier.height(5.dp))            Text(                text = category.name,                fontSize = 14.sp,                color = Color.White,                maxLines = 1            )        }    }}@Composablefun CourseList(courseAndUsers: List<CourseWithUser>, navController: NavController) {    LazyRow(        modifier = Modifier.fillMaxWidth(),        horizontalArrangement = Arrangement.spacedBy(16.dp)    ) {        items(courseAndUsers) { courseWithUser ->            CourseItem(courseWithUser = courseWithUser, navController = navController)        }    }}@Composablefun CourseItem(courseWithUser: CourseWithUser, navController: NavController) {    val course = courseWithUser.course    val user = courseWithUser.user    Card(        modifier = Modifier            .size(220.dp, 240.dp)            .clickable {                navController.navigate(Routes.CourseDetail.routes + "/${course.courseId}")            },        colors = CardDefaults.cardColors(containerColor = Color.White)    ) {        Column(            horizontalAlignment = Alignment.CenterHorizontally,            verticalArrangement = Arrangement.Center,            modifier = Modifier.fillMaxWidth()        ) {            course.image?.let {                Image(                    contentScale = ContentScale.Crop,                    painter = rememberAsyncImagePainter(model = it),                    contentDescription = null,                    modifier = Modifier                        .size(220.dp, 160.dp)                        .padding(8.dp)                        .fillMaxSize()                        .shadow(elevation = 1.dp, shape = RoundedCornerShape(10.dp))                        .background(gray80, RoundedCornerShape(10.dp))                )            }            Spacer(modifier = Modifier.height(5.dp))            Column(                modifier = Modifier                    .fillMaxWidth()                    .padding(start = 12.dp, end = 8.dp)            ) {                Text(                    text = course.title,                    maxLines = 1,                    fontSize = 18.sp,                    fontWeight = FontWeight.Bold,                    color = black80,                    textAlign = TextAlign.Start                )                Spacer(modifier = Modifier.height(5.dp))                Row(                    horizontalArrangement = Arrangement.Center,                    verticalAlignment = Alignment.CenterVertically                ) {                    user.imageUrl?.let {                        Image(                            contentScale = ContentScale.Crop,                            painter = rememberAsyncImagePainter(model = it),                            contentDescription = null,                            modifier = Modifier                                .clip(shape = CircleShape)                                .size(30.dp)                        )                    }                    Spacer(modifier = Modifier.padding(end = 10.dp))                    Text(                        text = "Created by ${user.userName}",                        fontSize = 12.sp,                        fontWeight = FontWeight.Normal,                        color = gray80,                        textAlign = TextAlign.Start                    )                }            }        }    }}