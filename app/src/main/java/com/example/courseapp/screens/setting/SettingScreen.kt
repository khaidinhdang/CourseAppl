package com.example.doancs3.setting.uiimport androidx.compose.animation.fadeOutimport androidx.compose.foundation.Imageimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.borderimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.LazyRowimport androidx.compose.foundation.lazy.itemsimport androidx.compose.foundation.shape.CircleShapeimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.foundation.text.BasicTextimport androidx.compose.material.AppBarDefaultsimport androidx.compose.material.IconButtonimport androidx.compose.material.TopAppBarimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.ArrowBackimport androidx.compose.material.icons.filled.MoreVertimport androidx.compose.material.icons.outlined.KeyboardArrowRightimport androidx.compose.material.icons.outlined.Lockimport androidx.compose.material.icons.outlined.Notificationsimport androidx.compose.material.icons.outlined.Personimport androidx.compose.material3.Cardimport androidx.compose.material3.CardDefaultsimport androidx.compose.material3.CircularProgressIndicatorimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.Iconimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.getValueimport androidx.compose.runtime.livedata.observeAsStateimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.rememberCoroutineScopeimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.draw.shadowimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.lifecycle.viewmodel.compose.viewModelimport androidx.navigation.NavControllerimport androidx.navigation.NavHostControllerimport coil.compose.rememberAsyncImagePainterimport com.composables.ui.Menuimport com.composables.ui.MenuButtonimport com.composables.ui.MenuContentimport com.composables.ui.MenuItemimport com.example.courseapp.ViewModel.AddCourseViewModelimport com.example.courseapp.ViewModel.AuthViewModelimport com.example.courseapp.ViewModel.CourseWithUserimport com.example.courseapp.ViewModel.HomeViewModelimport com.example.courseapp.navigation.Routesimport com.example.courseapp.screens.Home.CourseItemimport com.example.courseapp.screens.Home.CourseListimport com.example.courseapp.ui.theme.black80import com.example.courseapp.ui.theme.gray80import com.example.courseapp.ui.theme.white80import kotlinx.coroutines.launch@OptIn(ExperimentalMaterial3Api::class)@Composablefun SettingScreen(navController: NavHostController) {    val authViewModel: AuthViewModel = viewModel()    val firebaseUser by authViewModel.firebaseUser.observeAsState(null)    val homeViewModel: HomeViewModel = viewModel()    val userCourses by homeViewModel.userCourses.observeAsState()    val userRole by authViewModel.userRole.observeAsState()    LaunchedEffect(Unit) {        authViewModel.fetchUserRole()    }    LaunchedEffect(firebaseUser) {        if (firebaseUser == null) {            navController.navigate(Routes.Login.routes) {                popUpTo(navController.graph.startDestinationId)                launchSingleTop = true            }        }    }    Column(        Modifier            .background(white80)            .fillMaxSize()    ){        TopAppBar(            title = { Text(text = "Settings", textAlign = TextAlign.Center,modifier=Modifier.fillMaxWidth()) },            backgroundColor = white80,            contentColor = black80,            elevation = AppBarDefaults.TopAppBarElevation,            navigationIcon = {                IconButton(onClick = {  }) {                    Icon(Icons.Default.ArrowBack, contentDescription = "Back")                }            },            actions = {                IconButton(onClick = {  }) {                    Icon(Icons.Default.MoreVert, contentDescription = "More")                }            }        )        Column(            horizontalAlignment = Alignment.Start,            verticalArrangement = Arrangement.Top,            modifier = Modifier                .fillMaxSize()                .background(white80)                .padding(top = 25.dp, start = 25.dp)        ) {            Text(                text = "General",                fontWeight = FontWeight.Normal,                fontSize = 20.sp,                color = black80            )            Spacer(modifier = Modifier.height(20.dp))            LazyColumn(                verticalArrangement = Arrangement.spacedBy(20.dp)            ){                item {                    Card(                        onClick = {                            navController.navigate(Routes.Profile.routes)                        },                        modifier = Modifier                            .fillMaxWidth()                            .padding(end = 25.dp)                            .size(366.dp, 56.dp),                        shape = RoundedCornerShape(15.dp),                        colors = CardDefaults.cardColors(containerColor = Color.White)                    ) {                        Row(                            horizontalArrangement = Arrangement.Center,                            verticalAlignment = Alignment.CenterVertically,                            modifier = Modifier                                .fillMaxSize()                                .padding(15.dp, 5.dp)                        ){                            Icon(                                Icons.Outlined.Person,                                contentDescription = null,                                tint = Color(0xFF2A3447),                                modifier = Modifier.size(24.dp)                            )                            Spacer(modifier = Modifier.padding(end = 10.dp))                            Text(                                text = "Edit Profile",                                color = Color(0xFF2A3447),                                fontWeight = FontWeight.Normal                            )                            Spacer(modifier = Modifier.weight(1f))                            Icon(                                Icons.Outlined.KeyboardArrowRight,                                contentDescription = null,                                tint = Color(0xFFA7AEC1),                                modifier = Modifier.size(24.dp)                            )                        }                    }                }                item {                    Card(                        onClick = {},                        modifier = Modifier                            .fillMaxWidth()                            .padding(end = 25.dp)                            .size(366.dp, 56.dp),                        shape = RoundedCornerShape(15.dp),                        colors = CardDefaults.cardColors(containerColor = Color.White)                    ) {                        Row(                            horizontalArrangement = Arrangement.Center,                            verticalAlignment = Alignment.CenterVertically,                            modifier = Modifier                                .fillMaxSize()                                .padding(15.dp, 5.dp)                        ){                            Icon(                                Icons.Outlined.Lock,                                contentDescription = null,                                tint = Color(0xFF2A3447),                                modifier = Modifier.size(24.dp)                            )                            Spacer(modifier = Modifier.padding(end = 10.dp))                            Text(                                text = "Change Password",                                color = Color(0xFF2A3447),                                fontWeight = FontWeight.Normal                            )                            Spacer(modifier = Modifier.weight(1f))                            Icon(                                Icons.Outlined.KeyboardArrowRight,                                contentDescription = null,                                tint = Color(0xFFA7AEC1),                                modifier = Modifier.size(24.dp)                            )                        }                    }                }                item {                    Card(                        onClick = {},                        modifier = Modifier                            .fillMaxWidth()                            .padding(end = 25.dp)                            .size(366.dp, 56.dp),                        shape = RoundedCornerShape(15.dp),                        colors = CardDefaults.cardColors(containerColor = Color.White)                    ) {                        Row(                            horizontalArrangement = Arrangement.Center,                            verticalAlignment = Alignment.CenterVertically,                            modifier = Modifier                                .fillMaxSize()                                .padding(15.dp, 5.dp)                        ){                            Icon(                                Icons.Outlined.Notifications,                                contentDescription = null,                                tint = Color(0xFF2A3447),                                modifier = Modifier.size(24.dp)                            )                            Spacer(modifier = Modifier.padding(end = 10.dp))                            Text(                                text = "Notifications",                                color = Color(0xFF2A3447),                                fontWeight = FontWeight.Normal                            )                            Spacer(modifier = Modifier.weight(1f))                            Icon(                                Icons.Outlined.KeyboardArrowRight,                                contentDescription = null,                                tint = Color(0xFFA7AEC1),                                modifier = Modifier.size(24.dp)                            )                        }                    }                }                item {                    Card(                        onClick = {                            authViewModel.logout()                        },                        modifier = Modifier                            .fillMaxWidth()                            .padding(end = 25.dp)                            .size(366.dp, 56.dp),                        shape = RoundedCornerShape(15.dp),                        colors = CardDefaults.cardColors(containerColor = Color.White)                    ) {                        Row(                            horizontalArrangement = Arrangement.Center,                            verticalAlignment = Alignment.CenterVertically,                            modifier = Modifier                                .fillMaxSize()                                .padding(15.dp, 5.dp)                        ){                            Icon(                                Icons.Outlined.Person,                                contentDescription = null,                                tint = Color(0xFF2A3447),                                modifier = Modifier.size(24.dp)                            )                            Spacer(modifier = Modifier.padding(end = 10.dp))                            Text(                                text = "Logout",                                color = Color(0xFF2A3447),                                fontWeight = FontWeight.Normal                            )                            Spacer(modifier = Modifier.weight(1f))                            Icon(                                Icons.Outlined.KeyboardArrowRight,                                contentDescription = null,                                tint = Color(0xFFA7AEC1),                                modifier = Modifier.size(24.dp)                            )                        }                    }                }            }            Spacer(modifier = Modifier.height(20.dp))            if (userRole == "teacher"){                Text(                    text = "Your course Create ",                    fontWeight = FontWeight.Normal,                    fontSize = 20.sp,                    color = black80                )                Spacer(modifier = Modifier.height(20.dp))                if (userCourses.isNullOrEmpty()) {                    Text(text = "No course")                } else {                    CourseListRow(userCourses = userCourses!!, navController)                }            }        }    }}@Composablefun CourseListRow(userCourses: List<CourseWithUser>, navController: NavController) {    LazyColumn(modifier = Modifier.fillMaxWidth(), verticalArrangement = Arrangement.spacedBy(16.dp)) {        items(userCourses) { courseWithUser ->            CourseItemTeacher(courseWithUser = courseWithUser, navController = navController)        }    }}@Composablefun CourseItemTeacher(courseWithUser: CourseWithUser, navController: NavController) {    val course = courseWithUser.course    val user = courseWithUser.user    val homeViewModel: HomeViewModel = viewModel()    val coroutineScope = rememberCoroutineScope()    Card(        modifier = Modifier            .size(362.dp, 70.dp)            .clickable {                navController.navigate(Routes.CourseDetail.routes + "/${course.courseId}")            },        colors = CardDefaults.cardColors(            containerColor = Color.White        )    ){        Row(            modifier = Modifier.fillMaxWidth(),            horizontalArrangement = Arrangement.Center,            verticalAlignment = Alignment.CenterVertically        ) {            course.image?.let {                Image(                    contentScale = ContentScale.Crop,                    painter = rememberAsyncImagePainter(model = it),                    contentDescription = null,                    modifier = Modifier                        .size(70.dp)                        .fillMaxSize()                        .shadow(elevation = 1.dp, shape = RoundedCornerShape(10.dp))                        .background(gray80, RoundedCornerShape(10.dp))                )            }            Column(                modifier = Modifier                    .fillMaxWidth()                    .padding(start = 12.dp, end = 8.dp)            ){                Row(                    horizontalArrangement = Arrangement.SpaceBetween,                    verticalAlignment = Alignment.CenterVertically,                    modifier = Modifier.fillMaxWidth()                ){                    Column {                        Text(                            text = course.title,                            maxLines = 1,                            fontSize = 16.sp,                            fontWeight = FontWeight.Bold,                            color = Color(0xff2A3447),                            textAlign = TextAlign.Start                        )                        Spacer(modifier = Modifier.height(5.dp))                        Row(                            horizontalArrangement = Arrangement.Center,                            verticalAlignment = Alignment.CenterVertically                        ) {                            user.imageUrl?.let {                                Image(                                    contentScale = ContentScale.Crop,                                    painter = rememberAsyncImagePainter(model = it),                                    contentDescription = null,                                    modifier = Modifier                                        .clip(shape = CircleShape)                                        .size(30.dp),                                )                            }                            Spacer(modifier = Modifier.padding(end=10.dp) )                            Text(                                text = "Created by ${user.userName}",                                fontSize = 12.sp,                                fontWeight = FontWeight.Normal,                                color = gray80,                                textAlign = TextAlign.Start                            )                        }                    }                    Column {                        val options = listOf("Update", "Delete")                        var selected by remember { mutableStateOf(0) }                        Menu(Modifier.align(Alignment.End)) {                            MenuButton{                                Row(                                    verticalAlignment = Alignment.CenterVertically,                                ) {                                    androidx.compose.material.Icon(                                        imageVector = Icons.Default.MoreVert,                                        contentDescription = null                                    )                                    Spacer(Modifier.width(4.dp))                                }                            }                            MenuContent(                                modifier = Modifier                                    .width(70.dp)                                    .border(1.dp, Color(0xFFE0E0E0), RoundedCornerShape(10.dp))                                    .background(Color.White)                                    .padding(4.dp),                                hideTransition = fadeOut()                            ) {                                options.forEachIndexed { index, option ->                                    MenuItem(                                        modifier = Modifier.clip(RoundedCornerShape(4.dp)),                                        onClick = {                                            selected = index                                            when (option) {                                                "Update" -> {                                                    navController.navigate(Routes.AddCourse.routes + "/${course.courseId}")                                                }                                                "Delete" -> {                                                    coroutineScope.launch {                                                        homeViewModel.deleteCourse(course.courseId)                                                    }                                                }                                            }                                        }                                    ) {                                        BasicText(option, modifier = Modifier                                            .fillMaxWidth()                                            .padding(vertical = 8.dp, horizontal = 4.dp))                                    }                                }                            }                        }                    }                }            }        }    }}