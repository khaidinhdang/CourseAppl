package com.example.courseapp.screens.CourseDetailimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.*import androidx.compose.material.BackdropScaffoldimport androidx.compose.material.BackdropValueimport androidx.compose.material.ExperimentalMaterialApiimport androidx.compose.material.Iconimport androidx.compose.material.IconButtonimport androidx.compose.material.Tabimport androidx.compose.material.TabRowimport androidx.compose.material.TabRowDefaultsimport androidx.compose.material.TabRowDefaults.tabIndicatorOffsetimport androidx.compose.material.Textimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.ArrowBackimport androidx.compose.material.icons.filled.Notificationsimport androidx.compose.material.rememberBackdropScaffoldStateimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.paintimport androidx.compose.ui.graphics.Brushimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.lifecycle.viewmodel.compose.viewModelimport androidx.navigation.NavHostControllerimport coil.compose.rememberAsyncImagePainterimport com.example.courseapp.ViewModel.ReviewViewModelimport com.example.courseapp.ViewModel.CourseWithUserimport com.example.courseapp.ui.theme.black80import com.example.courseapp.ui.theme.gray80import com.example.courseapp.ui.theme.white80@OptIn(ExperimentalMaterialApi::class)@Composablefun CourseDetailScreen(courseWithUser: CourseWithUser,navHostController: NavHostController) {    val course = courseWithUser.course    val user = courseWithUser.user    val viewModel: ReviewViewModel = viewModel()    val gradientColors = listOf(        Color(0xFFFF8450),        Color(0xFFFFAC71),    )    val gradientBrush = Brush.horizontalGradient(gradientColors)    val scaffoldState = rememberBackdropScaffoldState(BackdropValue.Revealed)    LaunchedEffect(scaffoldState) {        scaffoldState.reveal()    }    BackdropScaffold(        scaffoldState = scaffoldState,        frontLayerScrimColor = Color.Transparent,        frontLayerBackgroundColor = white80,        appBar = {            Box(                modifier = Modifier                    .paint(                        painter = rememberAsyncImagePainter(                            model = course.image                        ),                        contentScale = ContentScale.FillWidth                    )                    .padding(5.dp, 10.dp)            ){                Row(                    horizontalArrangement = Arrangement.SpaceBetween,                    verticalAlignment = Alignment.CenterVertically,                    modifier = Modifier.fillMaxWidth()                ) {                    IconButton(onClick = { navHostController.popBackStack() }) {                        Icon(Icons.Default.ArrowBack, tint = black80, contentDescription = "Back")                    }                    IconButton(onClick = { /* TODO: Handle more options */ }) {                        Icon(Icons.Default.Notifications, tint = black80, contentDescription = "More")                    }                }            }        },        backLayerContent = {        },        modifier = Modifier.background(white80),        frontLayerContent = {            Column(                Modifier                    .fillMaxSize()                    .padding(25.dp),            ) {                Column() {                    Text(                        text = course.title,                        fontWeight = FontWeight.Bold,                        fontSize = 24.sp,                        textAlign = TextAlign.Start,                        color = black80                    )                    Spacer(modifier = Modifier.padding(bottom = 5.dp))                    Text(                        text = "By ${user.userName}",                        fontWeight = FontWeight.ExtraBold,                        fontSize = 10.sp,                        color = gray80,                        textAlign = TextAlign.Start                    )                }                var selectedTab by remember { mutableStateOf(0) }                val tabs = listOf("Overview", "Reviews", "Mentors")                TabRow(                    selectedTabIndex = selectedTab,                    indicator = { tabPositions ->                        TabRowDefaults.Indicator(                            color = Color(0xFFFF8450),                            modifier = Modifier.tabIndicatorOffset(tabPositions[selectedTab])                        )                    },                    divider = {                        TabRowDefaults.Divider(                            color = gray80,                            thickness = 1.dp,                            modifier = Modifier.fillMaxWidth()                        )                    },                    backgroundColor = Color.Unspecified,                    contentColor = Color.White,                    modifier = Modifier.fillMaxWidth()                ) {                    tabs.forEachIndexed { index, text ->                        val textColor =                            if (selectedTab == index) Color(0xFFFF8450) else gray80                        Tab(                            selected = selectedTab == index,                            onClick = { selectedTab = index },                            text = {                                Text(                                    text = text,                                    color = textColor,                                    style = TextStyle(fontSize = 14.sp)                                )                            },                        )                    }                }                Spacer(modifier = Modifier.height(20.dp))                when (selectedTab) {                    0 -> OverviewScreen(course,courseWithUser,navHostController)                    1 -> ReviewScreen(reviewViewModel = viewModel, courseId = course.courseId)                }            }        }    )}