package com.example.courseapp.screens.CourseDetailimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.*import androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.*import androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.ArrowBackimport androidx.compose.material.icons.filled.MoreVertimport androidx.compose.material3.Cardimport androidx.compose.material3.CardDefaultsimport androidx.compose.runtime.*import androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.navigation.NavHostControllerimport com.example.courseapp.ViewModel.CourseWithUserimport com.example.courseapp.model.Lesson@Composablefun LessonScreen(navHostController: NavHostController, courseWithUser: CourseWithUser) {    val lessons = courseWithUser.course.lessons    var currentLessonIndex by remember { mutableStateOf(-1) }    var viewedLessons by remember { mutableStateOf(setOf<Int>()) }    Column {        TopAppBar(            title = { Text(text = courseWithUser.course.title, textAlign = TextAlign.Center, modifier = Modifier.fillMaxWidth()) },            backgroundColor = Color.White,            contentColor = Color.Black,            elevation = AppBarDefaults.TopAppBarElevation,            navigationIcon = {                IconButton(onClick = { navHostController.popBackStack() }) {                    Icon(Icons.Default.ArrowBack, contentDescription = "Back")                }            },            actions = {                IconButton(onClick = { /* TODO: Handle more options */ }) {                    Icon(Icons.Default.MoreVert, contentDescription = "More")                }            }        )        LazyColumn(            modifier = Modifier.fillMaxWidth(),            contentPadding = PaddingValues(vertical = 16.dp)        ) {            items(lessons) { lesson ->                val index = lessons.indexOf(lesson)                LessonItem(                    lesson = lesson,                    isCurrent = index == currentLessonIndex,                    isViewed = index in viewedLessons,                    onClick = {                        currentLessonIndex = if (currentLessonIndex == index) -1 else index                        viewedLessons = viewedLessons + index                    }                )            }        }    }}@Composablefun LessonItem(lesson: Lesson, isCurrent: Boolean, isViewed: Boolean, onClick: () -> Unit) {    Card(        modifier = Modifier            .fillMaxWidth()            .padding(horizontal = 16.dp, vertical = 8.dp)            .clickable(onClick = onClick),        shape = RoundedCornerShape(8.dp),        colors = CardDefaults.cardColors(            containerColor = if (isViewed) Color.LightGray else Color.White        ),    ) {        Column(            modifier = Modifier.padding(16.dp)        ) {            Text(                text = lesson.lessonTitle,                fontSize = 18.sp,                fontWeight = FontWeight.Bold,                color = Color.Black            )            if (isCurrent) {                Spacer(modifier = Modifier.height(8.dp))                Text(                    text = lesson.lessonContent,                    fontSize = 14.sp,                    color = Color.Gray                )                Spacer(modifier = Modifier.height(8.dp))                Text(                    text = lesson.lessonDuration,                    fontSize = 14.sp,                    color = Color.Gray                )            }        }    }}