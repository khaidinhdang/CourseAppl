package com.example.courseapp.ViewModelimport android.net.Uriimport android.util.Logimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport com.example.courseapp.model.Categoryimport com.google.firebase.database.DataSnapshotimport com.google.firebase.database.DatabaseErrorimport com.google.firebase.database.FirebaseDatabaseimport com.google.firebase.database.ValueEventListenerimport com.google.firebase.storage.FirebaseStorageimport java.util.UUIDclass CategoryViewModel : ViewModel() {    private val database = FirebaseDatabase.getInstance()    private val categoryRef = database.getReference("category")    private val storageRef = FirebaseStorage.getInstance().reference    private val _categories = MutableLiveData<List<Category>>()    val categories: LiveData<List<Category>> = _categories    private val _isPosted = MutableLiveData<Boolean>()    val isPosted: LiveData<Boolean> = _isPosted    init {        fetchCategories()    }    private fun fetchCategories() {        categoryRef.addListenerForSingleValueEvent(object : ValueEventListener {            override fun onDataChange(snapshot: DataSnapshot) {                val categoryList = mutableListOf<Category>()                for (categorySnapshot in snapshot.children) {                    val category = categorySnapshot.getValue(Category::class.java)                    category?.let {                        categoryList.add(it)                    }                }                _categories.postValue(categoryList)            }            override fun onCancelled(error: DatabaseError) {                Log.e("CategoryViewModel", "fetchCategories:onCancelled", error.toException())            }        })    }    fun saveData(name: String, imageUrl: String) {        val categoryId = UUID.randomUUID().toString()        val category = Category( categoryId,name,imageUrl)        categoryRef.child(categoryId).setValue(category)            .addOnSuccessListener {                _isPosted.postValue(true)            }            .addOnFailureListener { e ->                Log.e("CategoryViewModel", "saveData:onFailure", e)                _isPosted.postValue(false)            }    }    fun saveImage(name: String, imageUri: Uri) {        val imageRef = storageRef.child("course/${UUID.randomUUID()}.jpg")        val uploadTask = imageRef.putFile(imageUri)        uploadTask.addOnSuccessListener { _ ->            imageRef.downloadUrl.addOnSuccessListener { uri ->                saveData(name, uri.toString())            }        }.addOnFailureListener { e ->            Log.e("AddCourseViewModel", "Error uploading image: $e")            _isPosted.postValue(false)        }    }}