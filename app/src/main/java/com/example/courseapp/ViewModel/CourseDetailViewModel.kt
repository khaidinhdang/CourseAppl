package com.example.courseapp.ViewModelimport android.util.Logimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport com.example.courseapp.model.Courseimport com.example.courseapp.model.Userimport com.google.firebase.database.DataSnapshotimport com.google.firebase.database.DatabaseErrorimport com.google.firebase.database.FirebaseDatabaseimport com.google.firebase.database.ValueEventListenerclass CourseDetailViewModel : ViewModel() {    private val database = FirebaseDatabase.getInstance()    private val courseRef = database.getReference("course")    private val userRef = database.getReference("user")    private val _selectedCourseWithUser = MutableLiveData<CourseWithUser?>()    val selectedCourseWithUser: LiveData<CourseWithUser?> = _selectedCourseWithUser    fun getCourseDetails(courseId: String) {        courseRef.child(courseId).addListenerForSingleValueEvent(object : ValueEventListener {            override fun onDataChange(courseSnapshot: DataSnapshot) {                val course = courseSnapshot.getValue(Course::class.java)                if (course != null) {                    userRef.child(course.userId).addListenerForSingleValueEvent(object : ValueEventListener {                        override fun onDataChange(userSnapshot: DataSnapshot) {                            val user = userSnapshot.getValue(User::class.java)                            if (user != null) {                                _selectedCourseWithUser.postValue(CourseWithUser(course, user))                            } else {                                Log.e("HomeViewModel", "getCourseDetails: No user found with ID ${course.userId}")                            }                        }                        override fun onCancelled(error: DatabaseError) {                            Log.e("HomeViewModel", "getCourseDetails: onCancelled", error.toException())                        }                    })                } else {                    Log.e("HomeViewModel", "getCourseDetails: No course found with ID $courseId")                }            }            override fun onCancelled(error: DatabaseError) {                Log.e("HomeViewModel", "getCourseDetails: onCancelled", error.toException())            }        })    }}