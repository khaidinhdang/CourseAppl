package com.example.courseapp.navigationimport androidx.compose.foundation.layout.paddingimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.rounded.Addimport androidx.compose.material.icons.rounded.DateRangeimport androidx.compose.material.icons.rounded.Favoriteimport androidx.compose.material.icons.rounded.Homeimport androidx.compose.material.icons.rounded.Notificationsimport androidx.compose.material.icons.rounded.Settingsimport androidx.compose.material3.BottomAppBarimport androidx.compose.material3.Iconimport androidx.compose.material3.NavigationBarItemimport androidx.compose.material3.Scaffoldimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.getValueimport androidx.compose.runtime.livedata.observeAsStateimport androidx.compose.ui.Modifierimport androidx.lifecycle.viewmodel.compose.viewModelimport androidx.navigation.NavGraph.Companion.findStartDestinationimport androidx.navigation.NavHostControllerimport androidx.navigation.compose.NavHostimport androidx.navigation.compose.composableimport androidx.navigation.compose.currentBackStackEntryAsStateimport androidx.navigation.compose.rememberNavControllerimport com.example.courseapp.screens.addCourse.AddCourseScreenimport com.example.courseapp.screens.Calendar.CalendarScreenimport com.example.courseapp.screens.Home.HomeScreenimport com.example.courseapp.screens.component.NotificationScreenimport com.example.courseapp.ViewModel.AuthViewModelimport com.example.doancs3.setting.ui.SettingScreen@Composablefun BottomNavScreen(navController: NavHostController) {    val navController1 = rememberNavController()    val authViewModel: AuthViewModel = viewModel()    val userRole by authViewModel.userRole.observeAsState()    // Fetch user role when BottomNavScreen is composed    LaunchedEffect(Unit) {        authViewModel.fetchUserRole()    }    Scaffold(bottomBar = { MyBottomBar(navController1, userRole) }) { innerPadding ->        NavHost(            navController = navController1,            startDestination = Routes.Home.routes,            modifier = Modifier.padding(innerPadding)        ) {            composable(Routes.Home.routes) {                HomeScreen(navController)            }            composable(Routes.Calendar.routes) {                CalendarScreen(navController)            }            composable(Routes.AddCourse.routes) {                AddCourseScreen(navController)            }            composable(Routes.Notification.routes) {                NotificationScreen()            }            composable(Routes.Setting.routes) {                SettingScreen(navController)            }        }    }}@Composablefun MyBottomBar(navController1: NavHostController, userRole: String?) {    val backStackEntry = navController1.currentBackStackEntryAsState()    val list = listOf(        BottomNavItem(            title = "Home",            Routes.Home.routes,            Icons.Rounded.Home        ),        BottomNavItem(            title = "Calendar",            Routes.Calendar.routes,            Icons.Rounded.DateRange        ),        BottomNavItem(            title = "AddCourse",            Routes.AddCourse.routes,            Icons.Rounded.Add        ),        BottomNavItem(            title = "Notification",            Routes.Notification.routes,            Icons.Rounded.Notifications        ),        BottomNavItem(            title = "Setting",            Routes.Setting.routes,            Icons.Rounded.Settings        )    )    val filteredList = if (userRole == "teacher") list else list.filter { it.title != "AddCourse" }    BottomAppBar {        filteredList.forEach { item ->            val selected = item.route == backStackEntry?.value?.destination?.route            NavigationBarItem(                selected = selected,                onClick = {                    navController1.navigate(item.route) {                        popUpTo(navController1.graph.findStartDestination().id) {                            saveState = true                        }                        launchSingleTop = true                    }                },                icon = {                    Icon(imageVector = item.icon, contentDescription = null)                }            )        }    }}