package com.example.courseapp.navigationimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.material3.CircularProgressIndicatorimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.runtime.livedata.observeAsStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.lifecycle.viewmodel.compose.viewModelimport androidx.navigation.NavHostControllerimport androidx.navigation.compose.NavHostimport androidx.navigation.compose.composableimport com.example.courseapp.ViewModel.CourseDetailViewModelimport com.example.courseapp.screens.addCourse.AddCourseScreenimport com.example.courseapp.screens.Calendar.CalendarScreenimport com.example.courseapp.screens.Auth.ForgotPasswordScreenimport com.example.courseapp.screens.Home.HomeScreenimport com.example.courseapp.screens.Auth.LoginScreenimport com.example.courseapp.screens.component.NotificationScreenimport com.example.courseapp.screens.setting.ProfileScreenimport com.example.courseapp.screens.Auth.RegisterScreenimport com.example.courseapp.screens.CourseDetail.CourseDetailScreenimport com.example.courseapp.screens.CourseDetail.LessonScreenimport com.example.courseapp.screens.component.SplashScreenimport com.example.doancs3.setting.ui.SettingScreen@Composablefun NavGraph(navController: NavHostController) {    NavHost(        navController = navController,        startDestination = Routes.Splash.routes    ) {        composable(Routes.Splash.routes){            SplashScreen(navController)        }        composable(Routes.Home.routes){            HomeScreen(navController)        }        composable(Routes.Calendar.routes){            CalendarScreen(navController)        }        composable(Routes.AddCourse.routes){            AddCourseScreen(navController)        }        composable(Routes.Notification.routes){            NotificationScreen()        }        composable(Routes.Profile.routes){            ProfileScreen(navController)        }        composable(Routes.Setting.routes){            SettingScreen(navController)        }        composable(Routes.CourseDetail.routes + "/{courseId}") { backStackEntry ->            val courseId = backStackEntry.arguments?.getString("courseId")            val viewModel: CourseDetailViewModel = viewModel()            val selectedCourseWithUser by viewModel.selectedCourseWithUser.observeAsState()            if (selectedCourseWithUser == null) {                courseId?.let { viewModel.getCourseDetails(it) }            }            selectedCourseWithUser?.let { courseWithUser ->                CourseDetailScreen(courseWithUser = courseWithUser,navController)            } ?: run {                Box(modifier = Modifier.fillMaxSize(1f), contentAlignment = Alignment.Center){                    CircularProgressIndicator()                }            }        }        composable(Routes.Lesson.routes + "/{courseId}") { backStackEntry ->            val courseId = backStackEntry.arguments?.getString("courseId")            val viewModel: CourseDetailViewModel = viewModel()            val selectedCourseWithUser by viewModel.selectedCourseWithUser.observeAsState()            if (selectedCourseWithUser == null) {                courseId?.let { viewModel.getCourseDetails(it) }            }            selectedCourseWithUser?.let { courseWithUser ->                LessonScreen(courseWithUser = courseWithUser, navHostController = navController)            } ?: run {                Box(modifier = Modifier.fillMaxSize(1f), contentAlignment = Alignment.Center){                    CircularProgressIndicator()                }            }        }        composable(Routes.BottomNav.routes){            BottomNavScreen(navController)        }        composable(Routes.Login.routes){            LoginScreen(navController)        }        composable(Routes.Register.routes){            RegisterScreen(navController)        }        composable(Routes.Forgot.routes){            ForgotPasswordScreen(navController, onDismissed = {})        }    }}